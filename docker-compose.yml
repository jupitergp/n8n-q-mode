version: '3.8'

volumes:
  db_storage:
  n8n_storage:
  redis_storage:

x-shared: &shared
  restart: always
  image: docker.n8n.io/n8nio/n8n
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    - EXECUTIONS_MODE=queue
    - QUEUE_BULL_REDIS_HOST=redis
    # --- for production ---
    - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD} 
    # --------------
    - QUEUE_HEALTH_CHECK_ACTIVE=true
    - N8N_ENCRYPTION_KEY=${ENCRYPTION_KEY}
  volumes:
    - n8n_storage:/home/node/.n8n
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
    volumes:
      - db_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    # for production
    deploy:
      resources:
        limits:
          cpus: '0.5'  
          memory: 512M 
    #-----------

  redis:
    image: redis:6-alpine
    restart: always
    # production need
    command: redis-server --requirepass ${REDIS_PASSWORD}
    #-------
    volumes:
      - redis_storage:/data
    healthcheck:
    # add '-a' and '${REDIS_PASSWORD}' on production
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    # for production
    deploy:
      resources:
        limits:
          cpus: '0.2'  
          memory: 128M 
    #-----------

  n8n:
    <<: *shared
    ports:
      - 5678:5678
      # --- for production ---
    # for production
    deploy:
      resources:
        limits:
          cpus: '0.5'  
          memory: 256M 
    #-----------

  n8n-worker:
    <<: *shared
    command: worker
    depends_on:
      - n8n
      # --- for production ---
    deploy:
      resources:
        limits:
          cpus: '1.0' 
          memory: 512MB  
    # ----------------------